version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/ubuntu/zookeeper/data:/opt/zookeeper-3.4.13/data
    networks:
      - "api.network"

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: deployment-kafka-1 # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://deployment-kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ubuntu/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
    networks:
      - "api.network"
  db:
    image: mysql:5.7
    hostname: deployment-db-1
    restart: always
    environment:
      MYSQL_DATABASE: 'events' # Database name
      MYSQL_USER: 'kody' # So you don't have to use root, but you can if you like
      MYSQL_PASSWORD: 'ROMRAMRemRam!' # You can use whatever password you like
      MYSQL_ROOT_PASSWORD: 'ROMRAMRemRam!' # Password for root access
    ports:
      - '3306:3306' # <Port exposed> : < MySQL Port running inside container>
    expose:
      - '3306' # Opens port 3306 on the container
    volumes:
      - my-db:/var/lib/mysql # Where our data will be persisted
  receiver:
    image: kodymills395/receiver:latest
    hostname: receiver
    pull_policy: always
    ports:
      - "8080"
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/receiver:/config
      - /home/ubuntu/logs:/logs
    depends_on:
      - "kafka"
  storage:
    image: kodymills395/storage:latest
    hostname: storage
    pull_policy: always
    ports:
      - "8090"
    depends_on:
      - kafka
      - db
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/storage:/config
      - /home/ubuntu/logs:/logs
  processor:
    image: kodymills395/processing:latest
    hostname: processing
    pull_policy: always
    ports:
      - "8100"
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/processing:/config
      - /home/ubuntu/logs:/logs
      - processing-db:/data
    depends_on:
      - storage
  analyzer:
    image: kodymills395/analyzer:latest
    hostname: analyzer
    pull_policy: always
    ports:
      - "8110"
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/ubuntu/config/analyzer:/config
      - /home/ubuntu/logs:/logs
    depends_on:
      - kafka
  anomalies:
    image: anomalies:latest
    hostname: anomalies
    ports:
      - "8120"
    volumes:
      - /home/ubuntu/config/anomalies:/config
      - /home/ubuntu/logs:/logs
      - anomalies-db:/data
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=test
    depends_on:
      - kafka
  dashboard:
    image: dashboard:latest
    hostname: dashboard
    ports:
      - "3000"
    networks:
      - "api.network"
    depends_on:
      - processor
      - analyzer
  nginx:
    image: nginx:latest
    # Connects the conf file of the container to the conf file in our folder
    volumes:
      - /home/ubuntu/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
      - "receiver"
      - "storage"
      - "processor"
      - "analyzer"
      - "dashboard"
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
      - "80:80"
    networks:
      - "api.network"

# Names our volume
volumes:
  my-db:
  processing-db:
  anomalies-db:

networks:
  api.network:
